#include <DHT.h>          
#include <lmic.h>         
#include <hal/hal.h>
#include <SPI.h>

//Definiëren van LDR, DHTpin, DHTtype, Minimum en Maximum Temperatuur
#define DHTPIN A2
#define MINTEMP 24
#define MAXTEMP 28
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

int button = 2;               //nummer van drukknop pin
int led_binnen = 13;          //nummer van LED binnen (groen) pin
int buttonCurrent;
int buttonPrevious = LOW;
int ledState = LOW;           //led start LOW
int LDR = A0;                 //Set A0 (Analog Input) for LDR
int value;
int led_buiten = 12;          //nummer van LED buiten (geel) pin
int led_cv = 5;              //nummer van LED cv (rood) pin
int led_ventilatie = 8;      //nummer van LED ventilatie (blauw) pin

int temperatuur = 0;
int vochtigheid = 0;
int cv = 0;
int ventilatie=0;

void setup_poolhouse(){
  Serial.begin(9600);
  pinMode(led_binnen, OUTPUT);      //initialiseert LED binnen (groen) als output
  pinMode(button, INPUT);           //initialiseert drukknop als input
  pinMode(led_buiten, OUTPUT);      //initialiseert LED buiten (geel) als output
  pinMode(led_cv, OUTPUT);          //initialiseert LED cv (rood) als output
  pinMode(led_ventilatie, OUTPUT);  //initialiseert LED ventilatie (blauw) als output

  dht.begin();
}

void readButton(){
  buttonCurrent = digitalRead(button);   // read the button state
  Serial.print("Drukknop:");
  Serial.println(ledState);  
 
  if (buttonCurrent == HIGH && buttonPrevious == LOW)
  {
    if (ledState == HIGH)
    {
      ledState = LOW;
    }
    else
    {ledState = HIGH;
    }
  }
digitalWrite(led_binnen, ledState);
}

void readTemperatuur(){
  //LDR
  value = analogRead(LDR);      //leest de waarde van de LDR
  Serial.print("Lux:");
  Serial.println(value);

  if(value<950){
    digitalWrite(led_buiten, HIGH);   //Led brandt als het donker is
  }
  else
  {
    digitalWrite(led_buiten,LOW);    //Led wordt uitgeschakeld als het licht is
  }

  //TEMPERATUUR & VOCHTIGHEID
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  temperatuur = dht.readTemperature();
  vochtigheid=dht.readHumidity();

  Serial.print(F("Vochtigheid: "));
  Serial.print(h);
  Serial.println(F("%"));
  Serial.print(F("Temperatuur: "));
  Serial.print(t);
  Serial.println(F("°C"));  
  Serial.print("CV:");
  Serial.println (cv);
  Serial.print("Ventilatie:");
  Serial.println (ventilatie);

  if (t<MINTEMP){
    digitalWrite(led_cv, HIGH);   //Led brandt als temperatuur onder de minimum temperatuur is
    cv=HIGH;
  }
  else {
    digitalWrite(led_cv, LOW);    //Led brandt niet als temperatuur boven de minimum temperatuur is
    cv=LOW;
  }

  if (t>MAXTEMP){
    digitalWrite(led_ventilatie, HIGH);   //Led brandt als temperatuur hoger is dan maximum temperatuur is
    ventilatie=HIGH;
  }
  else {
    digitalWrite(led_ventilatie, LOW);    //Led brandt niet als temperatuur onder de maximum temperatuur is
    ventilatie=LOW;
  }
}

void runOnce_poolhouse(){
  readButton();
  readTemperatuur();
}

// LoRaWAN NwkSKey, network session key
// This is the default Semtech key, which is used by the prototype TTN
// network initially.
//ttn
static const PROGMEM u1_t NWKSKEY[16] = { 0x08, 0x2C, 0x5F, 0x4C, 0x4A, 0xE6, 0x52, 0x26, 0x5A, 0xFD, 0x1B, 0x52, 0x48, 0x46, 0x4C, 0xD2 };

// LoRaWAN AppSKey, application session key
// This is the default Semtech key, which is used by the prototype TTN
// network initially.
//ttn
static const u1_t PROGMEM APPSKEY[16] = { 0x46, 0x66, 0x35, 0xF8, 0x82, 0x60, 0xF6, 0x80, 0xAE, 0x5E, 0x6C, 0x1B, 0xF7, 0xC6, 0x02, 0x37 };
//
// LoRaWAN end-device address (DevAddr)
// See http://thethingsnetwork.org/wiki/AddressSpace
// ttn
static const u4_t DEVADDR = 0x26011140;


// These callbacks are only used in over-the-air activation, so they are
// left empty here (we cannot leave them out completely unless
// DISABLE_JOIN is set in config.h, otherwise the linker will complain).
void os_getArtEui (u1_t* buf) { }
void os_getDevEui (u1_t* buf) { }
void os_getDevKey (u1_t* buf) { }

//static uint8_t mydata[] = "abcdefg";
static osjob_t initjob,sendjob,blinkjob;

// Schedule TX every this many seconds (might become longer due to duty
// cycle limitations).
const unsigned TX_INTERVAL = 10;

// Pin mapping
const lmic_pinmap lmic_pins = {
    .nss = 10,
    .rxtx = LMIC_UNUSED_PIN,
    .rst = 9,
    .dio = {2, 6, 7},
};
void do_send(osjob_t* j){
    // Check if there is not a current TX/RX job running
    if (LMIC.opmode & OP_TXRXPEND) {
        Serial.println("OP_TXRXPEND, not sending");
    } else {
        // Prepare upstream data transmission at the next possible time.
        uint8_t mydata[] = "UUUU??";
        // BINNEN LED
        if (ledState == HIGH) {
          mydata[0] = "A";
        }
        // BUITEN LED
        if (led_buiten == HIGH) {
          mydata[1] = "A";
        }
        // CV
        if (cv == HIGH) {
          mydata[2] = "A";
        }
        // VENTILATIE
        if (ventilatie == HIGH) {
          mydata[3] = "A";
        }
        //TEMPERATUUR
        float roundedTemp = round(temperatuur);
        mydata[4] = (uint8_t)roundedTemp + 0x30;

        //VOCHTIGHEID
        float roundedVocht = round(vochtigheid);
        mydata[5] = (uint8_t)roundedVocht + 0x30;

        LMIC_setTxData2(1, mydata, sizeof(mydata)-1, 0);
        Serial.println("Packet queued");
        Serial.println(LMIC.freq);
    }
    // Next TX is scheduled after TX_COMPLETE event.
}

void onEvent (ev_t ev) {
    Serial.print(os_getTime());
    Serial.print(": ");
    Serial.println(ev);
    switch(ev) {
        case EV_SCAN_TIMEOUT:
            Serial.println("EV_SCAN_TIMEOUT");
            break;
        case EV_BEACON_FOUND:
            Serial.println("EV_BEACON_FOUND");
            break;
        case EV_BEACON_MISSED:
            Serial.println("EV_BEACON_MISSED");
            break;
        case EV_BEACON_TRACKED:
            Serial.println("EV_BEACON_TRACKED");
            break;
        case EV_JOINING:
            Serial.println("EV_JOINING");
            break;
        case EV_JOINED:
            Serial.println("EV_JOINED");
            break;
        case EV_RFU1:
            Serial.println("EV_RFU1");
            break;
        case EV_JOIN_FAILED:
            Serial.println("EV_JOIN_FAILED");
            break;
        case EV_REJOIN_FAILED:
            Serial.println("EV_REJOIN_FAILED");
            break;
        case EV_TXCOMPLETE:
            Serial.println("EV_TXCOMPLETE (includes waiting for RX windows)");
            if(LMIC.dataLen) {
                // data received in rx slot after tx
                Serial.print("Data Received: ");
                Serial.write(LMIC.frame+LMIC.dataBeg, LMIC.dataLen);
                Serial.println();
            }
            // Schedule next transmission
            os_setTimedCallback(&sendjob, os_getTime()+sec2osticks(TX_INTERVAL), do_send);
            runOnce_poolhouse();
            break;
        case EV_LOST_TSYNC:
            Serial.println("EV_LOST_TSYNC");
            break;
        case EV_RESET:
            Serial.println("EV_RESET");
            break;
        case EV_RXCOMPLETE:
            // data received in ping slot
            Serial.println("EV_RXCOMPLETE");
            break;
        case EV_LINK_DEAD:
            Serial.println("EV_LINK_DEAD");
            break;
        case EV_LINK_ALIVE:
            Serial.println("EV_LINK_ALIVE");
            break;
         default:
            Serial.println("Unknown event");
            break;
    }
}

void setup() {
    setup_poolhouse();
  
    Serial.begin(9600);
    while(!Serial);
    Serial.println("Starting");
    #ifdef VCC_ENABLE
     For Pinoccio Scout boards
    pinMode(VCC_ENABLE, OUTPUT);
    digitalWrite(VCC_ENABLE, HIGH);
    delay(1000);
    #endif

    // LMIC init
    os_init();
    // Reset the MAC state. Session and pending data transfers will be discarded.
    LMIC_reset();
    //LMIC_setClockError(MAX_CLOCK_ERROR * 1/100);
    // Set static session parameters. Instead of dynamically establishing a session
    // by joining the network, precomputed session parameters are be provided.
    #ifdef PROGMEM
    // On AVR, these values are stored in flash and only copied to RAM
    // once. Copy them to a temporary buffer here, LMIC_setSession will
    // copy them into a buffer of its own again.
    uint8_t appskey[sizeof(APPSKEY)];
    uint8_t nwkskey[sizeof(NWKSKEY)];
    memcpy_P(appskey, APPSKEY, sizeof(APPSKEY));
    memcpy_P(nwkskey, NWKSKEY, sizeof(NWKSKEY));
    LMIC_setSession (0x1, DEVADDR, nwkskey, appskey);
    #else
    // If not running an AVR with PROGMEM, just use the arrays directly 
    LMIC_setSession (0x1, DEVADDR, NWKSKEY, APPSKEY);
    #endif
    
    // Disable link check validation
    LMIC_setLinkCheckMode(0);

    // TTN uses SF9 for its RX2 window.
    LMIC.dn2Dr = DR_SF9;
    
    // Set data rate and transmit power (note: txpow seems to be ignored by the library)
    LMIC_setDrTxpow(DR_SF7,14);

    // Start job
    do_send(&sendjob);
}

void loop() {
    os_runloop_once();
}
